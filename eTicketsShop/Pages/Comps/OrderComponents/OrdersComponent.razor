@page "/orders"
@using System.Security.Claims

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IOrdersService OrdersService;

@attribute [Authorize]

<div class="row">
    <div class="col-md-8 offset-2">
        <p>
            <h4>List of all your orders</h4>
        </p>

        <table class="table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Items</th>
                    <th>Total</th>
                    <AuthorizeView Roles="Admin">
                        <th>User</th>
                    </AuthorizeView>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in this.orders)
                {
                    <tr>
                        <td class="align-middle">@order.Id</td>
                        <td class="align-middle">
                            <ul style="list-style-type: none">
                                @foreach (var item in order.OrderItems)
                                {
                                    <li>
                                        <div class="alert alert-info" role="alert">
                                            <span class="badge bg-success">@item.Amount</span> [@item.Price.ToString("c")] - @item.Movie.Name
                                        </div>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td class="align-middle">
                            @order.OrderItems.Select(m => m.Movie.Price * m.Amount).Sum().ToString("c")
                        </td>
                        <AuthorizeView Roles="Admin">
                            <td class="align-middle"> @order.User.FullName </td>
                        </AuthorizeView>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@code {
    private IEnumerable<Order> orders = new List<Order>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await this.AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        var userRole = user.FindFirstValue(ClaimTypes.Role);

        this.orders = await this.OrdersService.GetOrdersByUserIdAndRoleAsync(userId, userRole);
    }
}
